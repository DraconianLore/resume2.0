{"version":3,"sources":["Navbar.js","resume/Resume.js","portfolio/Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","setActive","e","preventDefault","clicked","target","id","state","setState","portfolio","resume","className","this","onClick","Component","Resume","Portfolio","App","pageName","activePage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAEqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,UAAY,SAACC,GACXA,EAAEC,iBACF,IAAMC,EAAUF,EAAEG,OAAOC,GACE,iBAAxB,EAAKC,MAAMH,KACG,cAAZA,GACD,EAAKI,SAAS,CACZC,UAAW,aACXC,OAAQ,iBAEV,EAAKV,MAAMC,UAAU,eAErB,EAAKO,SAAS,CACZC,UAAW,eACXC,OAAQ,eAEV,EAAKV,MAAMC,UAAU,aApBzB,EAAKM,MAAM,CACTE,UAAW,aACXC,OAAQ,gBAJO,E,sEA2BjB,OACE,yBAAKC,UAAU,WACb,4BAAQL,GAAG,YAAYK,UAAWC,KAAKL,MAAME,UAAWI,QAASD,KAAKX,WAAtE,aAGA,4BAAQK,GAAG,SAASK,UAAWC,KAAKL,MAAMG,OAAQG,QAASD,KAAKX,WAAhE,e,GAjC4Ba,cCAfC,E,iLAGjB,OACE,0C,GAJ8BD,aCAfE,E,iLAGjB,OACE,6C,GAJiCF,aC2BxBG,E,YAtBb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,UAAY,SAACiB,GACX,EAAKV,SAAS,CAACW,WAAYD,KAN3B,EAAKX,MAAM,CACTY,WAAY,aAHG,E,sEAYjB,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAQV,UAAWW,KAAKX,YACG,cAA1BW,KAAKL,MAAMY,YAA8B,kBAAC,EAAD,MACf,WAA1BP,KAAKL,MAAMY,YAA2B,kBAAC,EAAD,W,GAjB7BL,aCMEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3eac99af.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      portfolio: 'active-tab',\n      resume: 'inactive-tab'\n    }\n  }\n  setActive = (e) => {\n    e.preventDefault();\n    const clicked = e.target.id;\n    if(this.state[clicked] === 'inactive-tab') {\n      if(clicked === 'portfolio') {\n        this.setState({\n          portfolio: 'active-tab',\n          resume: 'inactive-tab'\n        })\n        this.props.setActive('portfolio')\n      } else {\n        this.setState({\n          portfolio: 'inactive-tab',\n          resume: 'active-tab'\n        })\n        this.props.setActive('resume')\n      }\n    } \n  }\n  render() {\n    return (\n      <div className=\"top-bar\">\n        <button id='portfolio' className={this.state.portfolio} onClick={this.setActive}>\n          Portfolio\n        </button>\n        <button id='resume' className={this.state.resume} onClick={this.setActive}>\n          Resume\n        </button>\n      </div>\n\n    )\n  }\n}\n","import React, {Component} from 'react';\n\nexport default class Resume extends Component{\n  \n  render(){\n    return(\n      <h1>Resume</h1>\n    )\n  }\n}","import React, {Component} from 'react';\n\nexport default class Portfolio extends Component{\n  \n  render(){\n    return(\n      <h1>Portfolio</h1>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Resume from './resume/Resume';\nimport Portfolio from './portfolio/Portfolio';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      activePage: 'portfolio'\n    }\n  }\n\n  setActive = (pageName) => {\n    this.setState({activePage: pageName})\n  }\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Navbar setActive={this.setActive} />\n        {this.state.activePage === 'portfolio' && <Portfolio />}\n        {this.state.activePage === 'resume' && <Resume />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}